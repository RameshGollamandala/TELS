CREATE OR REPLACE PACKAGE TELS_CONVERT_PKG AS
  FUNCTION CONVERT_ROW_ID_TO_ROW_NUMBER(IN_ROW_ID VARCHAR2) RETURN NUMBER;
  FUNCTION CONVERT_ROW_NUMBER_TO_ROW_ID(IN_ROW_NUMBER NUMBER) RETURN VARCHAR2;
END TELS_CONVERT_PKG;
/

CREATE OR REPLACE PACKAGE BODY TELS_CONVERT_PKG AS

  BASE NUMBER := 38;
  DIGIT_LIST CHAR(38) := '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-_';

  INVALID_ROW_NUMBER NUMBER := -1;
  INVALID_ROW_ID VARCHAR2(256) := '';

  FUNCTION CONVERT_ROW_ID_TO_ROW_NUMBER ( IN_ROW_ID IN VARCHAR2 ) RETURN NUMBER IS

    ROW_ID VARCHAR2(256) DEFAULT UPPER(IN_ROW_ID);

    DIGIT_STR CHAR(1);
    DIGIT_NUM NUMBER := 0;

    ROW_NUMBER NUMBER := 0;

  BEGIN

    IF ROW_ID IS NULL THEN
      RETURN INVALID_ROW_NUMBER;
    END IF;

    IF ROW_ID = '' THEN
      RETURN INVALID_ROW_NUMBER;
    END IF;

    FOR POS IN 1..LENGTH(ROW_ID) LOOP
      DIGIT_STR := SUBSTR(ROW_ID, POS, 1);
      DIGIT_NUM := INSTR(DIGIT_LIST, DIGIT_STR)-1;
      IF DIGIT_NUM >= 0 THEN
        ROW_NUMBER := (ROW_NUMBER * BASE) + DIGIT_NUM;
      ELSE
        RETURN INVALID_ROW_NUMBER;
      END IF;
    END LOOP;

    RETURN ROW_NUMBER;

  END CONVERT_ROW_ID_TO_ROW_NUMBER;

  FUNCTION CONVERT_ROW_NUMBER_TO_ROW_ID ( IN_ROW_NUMBER IN NUMBER ) RETURN VARCHAR2 IS

    REMAINDER_NUM INTEGER DEFAULT IN_ROW_NUMBER;

    ROW_ID VARCHAR2(256) := '';

  BEGIN

    IF IN_ROW_NUMBER < 0 THEN
      RETURN INVALID_ROW_ID;
    END IF;

    IF IN_ROW_NUMBER = 0 THEN
      ROW_ID := SUBSTR(DIGIT_LIST, MOD(REMAINDER_NUM, BASE) + 1, 1);
    END IF;

    WHILE REMAINDER_NUM != 0 LOOP
      ROW_ID := SUBSTR(DIGIT_LIST, MOD(REMAINDER_NUM, BASE) + 1, 1) || ROW_ID;
      REMAINDER_NUM := TRUNC(REMAINDER_NUM / BASE);
    END LOOP;

    RETURN ROW_ID;

  END CONVERT_ROW_NUMBER_TO_ROW_ID;

END TELS_CONVERT_PKG;
/

SHOW ERRORS
